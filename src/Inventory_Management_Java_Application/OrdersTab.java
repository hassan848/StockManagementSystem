/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Inventory_Management_Java_Application;

import Classes.TableHeaderRenderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author hassan
 */
public class OrdersTab extends javax.swing.JFrame {
    DefaultTableModel dtm;
    /**
     * Creates new form OrdersTab
     */
    public OrdersTab() {
        initComponents();
        
        setCustomerComboBox();
        productTypeComboBox();
        
        String[] JtableHeadings = {"Product ID","Product Name","Remaining Stock"};
        
	DefaultTableModel model = (DefaultTableModel)virtualReceiptTable.getModel();
        model.addRow(new Object[]{"Item Name","Price","Quantity","Total price"});
        model.addRow(new Object[]{});
        //virtualReceiptTable.setModel(model);
        
        virtualReceiptTable.setBackground(Color.WHITE);
        //((DefaultTableCellRenderer)virtualReceiptTable.getDefaultRenderer(Object.class)).setBackground(Color.WHITE);
        
        virtualReceiptTable.setGridColor(Color.WHITE);
        //virtualReceiptTable.setForeground(Color.WHITE);
        
        jScrollPane2.setBackground(Color.WHITE);
        jScrollPane2.setForeground(Color.WHITE);
        
        
        jScrollPane2.getViewport().setBackground(Color.WHITE);
        
        //virtualReceiptTable.setModel(dtm);
        
        //jScrollPane2.setOpaque(false);
        //virtualReceiptTable.setOpaque(false);
        
        jScrollPane2.getColumnHeader().setVisible(false);
        //jScrollPane2.revalidate();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        customerComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        productTypeComboBox = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProducts = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButtonAddItem = new javax.swing.JButton();
        jButtonRemoveItem = new javax.swing.JButton();
        jButtonClearReceipt = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        virtualReceiptTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldFinalPrice = new javax.swing.JTextField();
        jButtonMakeOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 0, 153));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ORDER BILLING");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1334, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setText("Customer:");

        customerComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        customerComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   -----Select-Customer-----" }));

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel3.setText("Product Type:");

        productTypeComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        productTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ---Select-Product Type---" }));
        productTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productTypeComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(productTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableProducts);

        jButtonAddItem.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButtonAddItem.setText("Add To Cart");
        jButtonAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddItemActionPerformed(evt);
            }
        });

        jButtonRemoveItem.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButtonRemoveItem.setText("Remove Item");
        jButtonRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveItemActionPerformed(evt);
            }
        });

        jButtonClearReceipt.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButtonClearReceipt.setText("Clear Receipt");
        jButtonClearReceipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearReceiptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jButtonAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                .addComponent(jButtonClearReceipt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(280, Short.MAX_VALUE)
                    .addComponent(jButtonRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(228, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonClearReceipt, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jButtonAddItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButtonRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
        );

        virtualReceiptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(virtualReceiptTable);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jLabel4.setText("Total :");

        jButtonMakeOrder.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jButtonMakeOrder.setText("Make Order");
        jButtonMakeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFinalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonMakeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldFinalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMakeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getFinalPriceOfAll(){
        double finalPrice = 0;
        for(int i=2; i<virtualReceiptTable.getModel().getRowCount(); i++){
            finalPrice = finalPrice+Double.valueOf(virtualReceiptTable.getValueAt(i, 3).toString());
        }
        //making the finalprice to 2 d.p.
        finalPrice = Math.round(finalPrice*100.0)/100.0;
        jTextFieldFinalPrice.setText("£"+String.valueOf(finalPrice));
    }
    
    private void productTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productTypeComboBoxActionPerformed
        if(productTypeComboBox.getSelectedItem()!=" ---Select-Product Type---"){
            
            Classes.manageOrdersTab customers = new Classes.manageOrdersTab();
            HashMap<String, Integer> map = customers.getProductTypes();

            displayProductsTable(map.get(productTypeComboBox.getSelectedItem().toString()));
        }
    }//GEN-LAST:event_productTypeComboBoxActionPerformed

    private void jButtonAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddItemActionPerformed
        // TODO add your handling code here:
        if(!jTableProducts.getSelectionModel().isSelectionEmpty()){
            
            int i = jTableProducts.getSelectedRow();
            int newIndex=-1;
            
            try{
                String getQtyInput = JOptionPane.showInputDialog("Quantity","1");
                if(getQtyInput!=null){


                    int productsQuantity = Integer.valueOf(getQtyInput);

                    boolean checkIfAdded = false;


                    Object dataInProduct[] = new Object[4];
                    //int selectedProductID = Integer.valueOf(jTableProducts.getValueAt(i, 0).toString());
                    dataInProduct[0] = jTableProducts.getValueAt(i, 1);
                    dataInProduct[1] = jTableProducts.getValueAt(i, 3);
                    dataInProduct[2] = productsQuantity;
                    //price is worked out by quantity times price
                    double priceOfProduct = Double.valueOf(jTableProducts.getValueAt(i, 3).toString().substring(1)) * productsQuantity;
                    //converting the price of product to 2 d.p.
                    priceOfProduct = Math.round(priceOfProduct*100.0)/100.0;
                    dataInProduct[3] = priceOfProduct;


                    DefaultTableModel model = (DefaultTableModel)virtualReceiptTable.getModel();

                    if(productsQuantity>Integer.valueOf(jTableProducts.getValueAt(i, 2).toString())){
                       JOptionPane.showMessageDialog(null, "Not Enough In Stock","Stock Insufficient",2);
                    }else if(productsQuantity == 0){
                       JOptionPane.showMessageDialog(null, "0 Is Not A Valid Value","Invalid",2);
                    }else{
                           //System.out.println(virtualReceiptTable.getModel().getRowCount());
                        if(virtualReceiptTable.getModel().getRowCount()==1){
                               model.addRow(dataInProduct);
                               getFinalPriceOfAll();
                        }else{

                               for(int x=0; x<virtualReceiptTable.getModel().getRowCount(); x++){

                                  if(dataInProduct[0] == virtualReceiptTable.getValueAt(x, 0)){
                                      System.out.println(virtualReceiptTable.getValueAt(x, 0));
                                      System.out.println(dataInProduct[0]);

                                      checkIfAdded = true;
                                      newIndex = x;
                                }
                            }
                               if(checkIfAdded){

                                   int quantityAfterOrder = productsQuantity + Integer.valueOf(virtualReceiptTable.getValueAt(newIndex, 2).toString());
                                   System.out.println(quantityAfterOrder);
                                   //need to check if the quantity added is more than the stock in the original products table
                                   if(quantityAfterOrder>Integer.valueOf(jTableProducts.getValueAt(i, 2).toString())){
                                       JOptionPane.showMessageDialog(null, "Not Enough In Stock","Stock Insufficient",2);
                                   }else{

                                       //we need to update the receipt when a adding the same item after its already been added
                                       virtualReceiptTable.setValueAt(quantityAfterOrder, newIndex, 2);
                                       virtualReceiptTable.setValueAt(quantityAfterOrder*Double.valueOf(jTableProducts.getValueAt(i, 3).toString().substring(1)), newIndex, 3);
                                       getFinalPriceOfAll();
                                   }
                               }else{
                                   model.addRow(dataInProduct);
                                   getFinalPriceOfAll();
                               }
                            }
                        }
                    }
                
            }catch(HeadlessException | NumberFormatException ex){
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Please Enter a Valid Number", 0);
            }
            
            }else{
                JOptionPane.showMessageDialog(null, "Please Select A Product", "There Is No Product Selected!", 0);
        }
        
    }//GEN-LAST:event_jButtonAddItemActionPerformed

    private void jButtonRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveItemActionPerformed
        if(!virtualReceiptTable.getSelectionModel().isSelectionEmpty()){
            int selectedIndex = virtualReceiptTable.getSelectedRow();

            if(selectedIndex!=0){
                if(selectedIndex!=1){
                    DefaultTableModel model = (DefaultTableModel)virtualReceiptTable.getModel();
                    model.removeRow(selectedIndex);
                    getFinalPriceOfAll();
                }else{
                    virtualReceiptTable.clearSelection();
                }
            }else{
                virtualReceiptTable.clearSelection();
            }

        }else{
            JOptionPane.showMessageDialog(null, "Please Select A Product", "There Is No Product Selected!", 0);
        }
    }//GEN-LAST:event_jButtonRemoveItemActionPerformed

    private void jButtonClearReceiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearReceiptActionPerformed
        // cannot clear rows 0 & 1
        System.out.println(virtualReceiptTable.getModel().getRowCount());
        if(virtualReceiptTable.getModel().getRowCount()>2){
            int decision = JOptionPane.showConfirmDialog(null,"Are you sure you want to clear your basket?","Clear Basket", JOptionPane.YES_NO_OPTION);
            if(decision == 0){
                int startLoop = virtualReceiptTable.getModel().getRowCount();
        
                for(int i=startLoop-1; i>1; i--){
                    DefaultTableModel model = (DefaultTableModel)virtualReceiptTable.getModel();
                    model.removeRow(i);
                    getFinalPriceOfAll();
                    virtualReceiptTable.clearSelection();
                }
            }
        } 
    }//GEN-LAST:event_jButtonClearReceiptActionPerformed

    public void clearReceiptY(){
        if(virtualReceiptTable.getModel().getRowCount()>2){
            int startLoop = virtualReceiptTable.getModel().getRowCount();
        
            for(int i=startLoop-1; i>1; i--){
                DefaultTableModel model = (DefaultTableModel)virtualReceiptTable.getModel();
                model.removeRow(i);
                getFinalPriceOfAll();
                virtualReceiptTable.clearSelection();
            }
        }
    }
    
    
    
    private void jButtonMakeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeOrderActionPerformed
        if(customerComboBox.getSelectedItem()!="   -----Select-Customer-----"){
            if(virtualReceiptTable.getRowCount()>2){
                //Start actual commands here
                int quantity = 0;
                
                //getting the original value from customer comboBox
                String originalID = customerComboBox.getSelectedItem().toString();
                String getID = originalID.substring(originalID.lastIndexOf("ID:")).substring(3);
                int intGetID = Integer.valueOf(getID);
                int intGetPID = 0;
                
                double totalPriceSep = 0;
                
                //get Date & Time
                Classes.getDateTime dateNtime = new Classes.getDateTime();
                
                //get Total price
                double totalPrice = Double.parseDouble(jTextFieldFinalPrice.getText().substring(1));
                
                //make order object and call insertOrder
                Classes.makeOrder insertOrder = new Classes.makeOrder(0, intGetID, dateNtime.getDate(), dateNtime.getTime(), totalPrice);
                Classes.makeOrder.insertOrdersTable(insertOrder);
                
                //get last orderID from table
                int orderID = Classes.makeOrder.getLastOrderID();
                //System.out.println("orders ID: "+orderID);
                
                //need to insert to orderline table
                for(int i=2; i<virtualReceiptTable.getRowCount(); i++){
                    
                    intGetPID = Classes.makeOrder.getProductIDfromName(virtualReceiptTable.getValueAt(i, 0).toString());
                    
                    quantity = Integer.valueOf(virtualReceiptTable.getValueAt(i, 2).toString());
                    totalPriceSep = Double.valueOf(virtualReceiptTable.getValueAt(i, 3).toString());
                    
                    Classes.makeOrder.insertOrderLineTable(orderID, intGetPID, quantity, totalPriceSep);
                    //System.out.println("product ID: "+intGetID);
                }
                
                String customerName = Classes.makeOrder.customerName(intGetID);
                String email = Classes.makeOrder.getCustomerEmail(intGetID);
                
                Classes.generateWordReceipt.createDocument(dateNtime.getDate(), dateNtime.getTime(), orderID, customerName, intGetID, totalPrice, email);
                completeOrder();
                
            }else{
                JOptionPane.showMessageDialog(null, "You have no Items in your basket", "You Have No Items Selected!", 0);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please Select A Customer", "There Is No Customer Selected!", 0);
        }
    }//GEN-LAST:event_jButtonMakeOrderActionPerformed

    //after making the order give procedures
    public void completeOrder(){
        JOptionPane.showMessageDialog(null, "Order has been complete");
        //clear receipt
        clearReceiptY();
        
        //deselecting both tables
        virtualReceiptTable.clearSelection();
        jTableProducts.clearSelection();
       
        //reset customer comboBox
        customerComboBox.setSelectedItem("   -----Select-Customer-----");
        displayProductsTable(1);
        
    }
    
    public void setCustomerComboBox(){
        Classes.manageOrdersTab customers = new Classes.manageOrdersTab();
        HashMap<String, Integer> map = customers.getAllCustomers();
        
        for(String customerName : map.keySet()){
            customerComboBox.addItem(customerName);
        }
    }
    
    public void productTypeComboBox(){
        Classes.manageOrdersTab productTypes = new Classes.manageOrdersTab();
        HashMap<String, Integer> map = productTypes.getProductTypes();
        
        for(String productTypeName : map.keySet()){
            productTypeComboBox.addItem(productTypeName);
        }
    }
    
    
    //display the jTable with the products of the correct productType
    public void displayProductsTable(int productType){
        Classes.productsPage products = new Classes.productsPage();
        ArrayList<Classes.productsPage> listOfProducts = products.productsFromProductTypeID(productType);
        
        String[] JtableHeadings = {"Product ID","Product Name","Remaining Stock", "Price", "Description", "Display Image"};
        Object[][] JtableRows = new Object[listOfProducts.size()][6];
        
        for(int i=0;i<listOfProducts.size();i++){
            JtableRows[i][0] = listOfProducts.get(i).getPID();
            JtableRows[i][1] = listOfProducts.get(i).getName();
            JtableRows[i][2] = listOfProducts.get(i).getStock();
            JtableRows[i][3] = "£"+listOfProducts.get(i).getProductPrice();
            JtableRows[i][4] = listOfProducts.get(i).getProductDescription();
            ImageIcon imgDB = new ImageIcon(new ImageIcon(listOfProducts.get(i).getImageDB()).getImage().getScaledInstance(120, 90, Image.SCALE_SMOOTH));
            JtableRows[i][5] = imgDB;
            //jLabel2.setIcon(imgDB);
            System.out.println(imgDB);
            //JtableRows[i][6] = Classes.productsPage.getProductType(listOfProducts.get(i).getTypeID());
        }
        
        Classes.addImageToJtable tableDisplayData = new Classes.addImageToJtable(JtableRows,JtableHeadings);
        jTableProducts.setModel(tableDisplayData);
        
        jTableProducts.setRowHeight(90);
        jTableProducts.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTableProducts.getColumnModel().getColumn(5).setPreferredWidth(150);
        jTableProducts.getColumnModel().getColumn(4).setPreferredWidth(120);
        
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrdersTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrdersTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrdersTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrdersTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrdersTab().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> customerComboBox;
    private javax.swing.JButton jButtonAddItem;
    private javax.swing.JButton jButtonClearReceipt;
    private javax.swing.JButton jButtonMakeOrder;
    private javax.swing.JButton jButtonRemoveItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProducts;
    private javax.swing.JTextField jTextFieldFinalPrice;
    private javax.swing.JComboBox<String> productTypeComboBox;
    private javax.swing.JTable virtualReceiptTable;
    // End of variables declaration//GEN-END:variables
}
